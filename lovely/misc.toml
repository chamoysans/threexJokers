[manifest]
version = "1.0.0"
priority = 0

[vars]

[[patches]]
[patches.pattern] # Wingdings
target = "functions/common_events.lua"
pattern = "function reset_idol_card()"
position = "before"
payload = '''
function reset_threex_wing_card()
	G.GAME.current_round.threex.wing.rankOne = 'Ace'
	G.GAME.current_round.threex.wing.rankTwo = 'King'
	local valid_cards = {}
    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            valid_cards[#valid_cards+1] = v
        end
    end
	if valid_cards[2] then 
        local first_card = pseudorandom_element(valid_cards, pseudoseed('wing'..G.GAME.round_resets.ante))

        G.GAME.current_round.threex.wing.rankOne = first_card.base.value
        G.GAME.current_round.threex.wing.rankOne_id = first_card.base.id

		local next_card = pseudorandom_element(valid_cards, pseudoseed('dings'.. G.GAME.round_resets.ante .. "okayTOREALLYREMOVETHEseededALLEGATIONSIWILLNOWBEPUTTINGTHISINTHISSPECIFICAREAANDTHEREWERENEVERANYseededALLEGATIONSANYWAYIJUSTWANTEDITTONEVEREVERGETTHESAMEIDASTHEOTHERONE"))

        G.GAME.current_round.threex.wing.rankTwo = next_card.base.value
        G.GAME.current_round.threex.wing.rankTwo_id = next_card.base.id
    end
end

'''
match_indent = true


[[patches]]
[patches.pattern] # Wingdings
target = "game.lua"
pattern = "current_round = {"
position = "after"
payload = '''
threex = {
    wing = {rankOne = 'Ace', rankTwo = 'King', active = false},
    taxReturnsSpent = 0,
},
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "card.lua"
pattern = "return self.base.id"
position = "at"
payload = '''
if G.GAME.current_round.threex.wing.active then
	if self.base.id == G.GAME.current_round.threex.wing.rankOne_id then
		return G.GAME.current_round.threex.wing.rankTwo_id

	elseif self.base.id == G.GAME.current_round.threex.wing.rankTwo_id then
		return G.GAME.current_round.threex.wing.rankOne_id

	else
		return self.base.id
	end
end
return self.base.id
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "game.lua"
pattern = "reset_idol_card()"
position = "after"
payload = '''
reset_threex_wing_card()
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "functions/state_events.lua"
pattern = "reset_idol_card()"
position = "after"
payload = '''
reset_threex_wing_card()
'''
match_indent = true


# ----- Balatro Rewards Program -----

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "function ease_dollars(mod, instant)"
position = "after"
payload = '''
local hasReturns = next(find_joker("returns")) and true or false
local hasRewards = next(find_joker("rewards")) and true or false
print("SKIBIDIIIIIIIII: ", "mod=", mod, "hasReturns=", hasReturns, "hasRewards=", hasRewards)

if G.jokers
   and #G.jokers.cards > 0
   and mod <= 0
   and (hasReturns or hasRewards)
then
    if next(find_joker('returns')) then
        G.GAME.current_round.threex.taxReturnsSpent = G.GAME.current_round.threex.taxReturnsSpent + math.abs(mod)
    end
    for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({threex_purchase = true, card = self})
    end
end

'''
match_indent = true

# -------------- Spud --------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """
if G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED then
"""
position = "at"
payload = '''
local enhancers = {
    ["The Chariot"]         = true,
    ["The Devil"]           = true,
    ["The Empress"]         = true,
    ["The Hierophant"]      = true,
    ["Justice"]             = true,
    ["The Lovers"]          = true,
    ["The Magician"]        = true,
    ["The Tower"]           = true,
    ["The World"]           = true,
}
    
if G.jokers.highlighted[1]
and #G.jokers.highlighted == 1
and G.jokers.highlighted[1]:gc().isSpud
and enhancers[self.ability.name]
then
    return true
end    
if G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """
end    if self.ability.consumeable.mod_conv or self.ability.consumeable.suit_conv then
"""
position = "at"
payload = '''
end

local enhancers = {
    ["The Chariot"]         = true,
    ["The Devil"]           = true,
    ["The Empress"]         = true,
    ["The Hierophant"]      = true,
    ["Justice"]             = true,
    ["The Lovers"]          = true,
    ["The Magician"]        = true,
    ["The Tower"]           = true,
    ["The World"]           = true,
}

local spudTo = {
    ["The Chariot"]    = "j_threex_battery",
    ["The Devil"]      = "j_something_else",
    ["The Empress"]    = "j_something_else",
    ["The Hierophant"] = "j_something_else",
    ["Justice"]        = "j_something_else",
    ["The Lovers"]     = "j_something_else",
    ["The Magician"]   = "j_something_else",
    ["The Tower"]      = "j_something_else",
    ["The World"]      = "j_something_else",
}
    
if G.jokers.highlighted[1]
  and #G.jokers.highlighted == 1
  and G.jokers.highlighted[1]:gc().isSpud
  and enhancers[self.ability.name]
then
    local percent = 0.85 + 0.001/(1 - 0.998)*0.3

    -- look up the new joker key
    local newKey = spudTo[self.ability.name]

    G.E_MANAGER:add_event(Event({
        trigger = "before",
        delay = 0.75,
        func = function()
            G.jokers.highlighted[1]:start_dissolve(nil, _first_dissolve)
            _first_dissolve = true
            return true
        end,
    }))

    G.E_MANAGER:add_event(Event({
        trigger = "after",
        delay = 0.4,
        func = function()
            play_sound("timpani")
            local card = SMODS.create_card({set = 'Joker', area = G.jokers, key = newKey})
            card:add_to_deck()
            G.jokers:emplace(card)
            card:juice_up(0.3, 0.5)
            if card.config.center.key == deleted_joker_key then
                check_for_unlock({ type = "pr_unlock" })
            end
            return true
        end,
    }))

  delay(0.5)
elseif self.ability.consumeable.mod_conv or self.ability.consumeable.suit_conv then
'''
match_indent = true
