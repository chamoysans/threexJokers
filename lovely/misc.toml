[manifest]
version = "1.0.0"
priority = 0

# ------- Mod Variables --------

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "current_round = {"
position = "after"
payload = '''
threex = {
    wing = {rankOne = 'Ace', rankTwo = 'King', active = false},
    taxReturnsSpent = 0,
    dumplings = {rank = 'Ace', id = 14}
},
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "functions/common_events.lua"
pattern = "function reset_idol_card()"
position = "before"
payload = '''
function reset_threex_wing_card()
	G.GAME.current_round.threex.wing.rankOne = 'Ace'
	G.GAME.current_round.threex.wing.rankTwo = 'King'
	local valid_cards = {}
    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            valid_cards[#valid_cards+1] = v
        end
    end
	if valid_cards[2] then 
        local first_card = pseudorandom_element(valid_cards, pseudoseed('wing'..G.GAME.round_resets.ante))

        G.GAME.current_round.threex.wing.rankOne = first_card.base.value
        G.GAME.current_round.threex.wing.rankOne_id = first_card.base.id

		local next_card = pseudorandom_element(valid_cards, pseudoseed('dings'.. G.GAME.round_resets.ante .. "okayTOREALLYREMOVETHEseededALLEGATIONSIWILLNOWBEPUTTINGTHISINTHISSPECIFICAREAANDTHEREWERENEVERANYseededALLEGATIONSANYWAYIJUSTWANTEDITTONEVEREVERGETTHESAMEIDASTHEOTHERONE"))

        G.GAME.current_round.threex.wing.rankTwo = next_card.base.value
        G.GAME.current_round.threex.wing.rankTwo_id = next_card.base.id
    end
end

function reset_threex_dumplings()
    G.GAME.current_round.threex.dumplings.rank = 'Ace'
    G.GAME.current_round.threex.dumplings.id = 14

    local valid_cards = {}

    for k, v in ipairs(G.playing_cards) do
        if v.ability.effect ~= 'Stone Card' then
            if not SMODS.has_no_rank(v) then
                valid_cards[#valid_cards+1] = v
            end
        end
    end
    if valid_cards[1] then 
        local card = pseudorandom_element(valid_cards, pseudoseed('mail'..G.GAME.round_resets.ante))
        G.GAME.current_round.threex.dumplings.rank = card.base.value
        G.GAME.current_round.threex.dumplings.id = card.base.id
    end
end

'''
match_indent = true

# ------- Wingdings --------

[[patches]]
[patches.pattern] # Wingdings
target = "card.lua"
pattern = "return self.base.id"
position = "at"
payload = '''
if G.GAME.current_round.threex.wing.active then
	if self.base.id == G.GAME.current_round.threex.wing.rankOne_id then
		return G.GAME.current_round.threex.wing.rankTwo_id

	elseif self.base.id == G.GAME.current_round.threex.wing.rankTwo_id then
		return G.GAME.current_round.threex.wing.rankOne_id

	else
		return self.base.id
	end
end
return self.base.id
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "game.lua"
pattern = "reset_idol_card()"
position = "after"
payload = '''
reset_threex_wing_card()
reset_threex_dumplings()
'''
match_indent = true

[[patches]]
[patches.pattern] # Wingdings
target = "functions/state_events.lua"
pattern = "reset_idol_card()"
position = "after"
payload = '''
reset_threex_wing_card()
'''
match_indent = true


# ----- Balatro Rewards Program -----

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "function ease_dollars(mod, instant)"
position = "after"
payload = '''
local hasReturns = next(find_joker('returns'))
local hasRewards = next(find_joker('rewards'))
if G.jokers
   and #G.jokers.cards > 0
   and mod <= 0
   and (hasReturns or hasRewards)
then
    if next(find_joker('returns')) then
        G.GAME.current_round.threex.taxReturnsSpent = G.GAME.current_round.threex.taxReturnsSpent + math.abs(mod)
    end
    for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({threex_purchase = true, card = self})
    end
end

'''
match_indent = true

# --------- Misc -----------

[[patches]]
[patches.pattern] # Dumplings
target = "card.lua"
pattern = "return self.base.suit == suit"
position = "before"
payload = '''
if self:get_id() == G.GAME.current_round.threex.dumplings.id then
    return true
end
'''
match_indent = true
